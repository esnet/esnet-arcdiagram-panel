{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"d3\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./utils.ts","webpack:///./styles.ts","webpack:///./components/Arc.tsx","webpack:///./components/SearchField.tsx","webpack:///./SimplePanel.tsx","webpack:///./components/CustomRangeSlider.tsx","webpack:///./module.ts","webpack:///./dataParser.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__200__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\nA collection of utility functions\n*/\n\n// find string by id\nexport function idToName(id: number, dic: any[]): string {\n    return dic.find( (obj: any) => obj.id === id).name\n}\n\n// get array of targets for node\nexport function getNodeTargets({ id, links }: { id: number; links: any[]; }): number[] {\n    return (\n        links\n        .filter( (obj: any) => obj.source === id)\n        .map( (obj: any ) => obj.target)\n    )\n}\n\n// map number to log\nexport function mapToLogRange(value: number, rangeMin: number, rangeMax: number,  minLinkSum: number, maxLinkSum: number) {\n    \n    const logMinValue = Math.log10(minLinkSum);\n    const logMaxValue = Math.log10(maxLinkSum);\n    const logRange = logMaxValue - logMinValue;\n    const factor = (rangeMax-1) / logRange;\n\n    const logValue = Math.log10(value);\n    const mappedValue = ((logValue - logMinValue) * factor) + rangeMin;\n    return mappedValue;\n}\n\nexport function mapToLinRange(value: number) {console.log(value)}\n\n// get an array of evenly spaced colors\nexport function getEvenlySpacedColors(amount: number, darkMode: boolean): string[] {\n\n    // add darkmode colors\n\n    const colors = [];\n    const lightColors = ['#FFD700', '#00BFFF', '#FF8C00', '#FF1493', '#7FFF00', '#9400D3', '#00FFFF', '#FF69B4', '#32CD32', '#FFDAB9']\n    const darkColors =  ['#7CFC00', '#1E90FF', '#FFA500', '#FFC0CB', '#8B008B', '#32CD32', '#FF00FF', '#FF6347', '#FFFF00', '#FF1493']     \n      \n      for (let i = 0; i < amount; i++) {\n        const colorIndex = i % darkColors.length;\n        colors.push(darkMode ? darkColors[colorIndex] : lightColors[colorIndex]);\n      }\n\n    return colors;\n\n}\n\n// get array of n equally spaced values in specific range\nexport function linSpace(start: number, stop: number, n: number): number[] {\n    const step = (stop - start) / (n - 1);\n    return Array.from({ length: n }, (_, i) => start + i * step);\n}\n\nexport function calcStrokeWidth(arcFromSource: boolean, scale: string, arcThickness: number, e: any, linkScaleFrom: number, linkScaleTo: number, minLink: number, maxLink: number) {\n    if(arcFromSource) {\n        // check if we apply logarithmic or linear scaling\n        if(scale === \"log\") {\n          e.strokeWidth = mapToLogRange(e.sum, linkScaleFrom, linkScaleTo, minLink, maxLink)          \n        } else {\n            // call function to map to lin range instead\n          e.strokeWidth = e.sum/10000000000000\n        }\n    } else {\n        e.strokeWidth = arcThickness\n    }\n}\n\nexport function replaceEllipsis(label: SVGTextElement, isHighlighted: Boolean){\n\n    const labelBoundingBox = label.getBoundingClientRect().width * (isHighlighted ? 1.6 : 1);\n    const mapRatio = (isHighlighted ? 0.2 : 0.3);\n    \n    const labelOffsetX = Number(label.getAttribute(\"transform\")?.split(\",\")[0].substring(10))\n\n    // check if label is out of bounds\n    if(labelBoundingBox > labelOffsetX) {\n\n        const overlap = labelBoundingBox - labelOffsetX\n\n        label.innerHTML = \"...\" + label.innerHTML.substring(overlap*mapRatio, label.innerHTML.length)\n    }\n\n}\n\nexport function resetLabel(label: SVGTextElement) {\n    label.innerHTML = label.getAttribute(\"name\")!;    \n}\n\nexport function evaluateQuery(query: string, nodeList: any[], labels: HTMLCollectionOf<SVGTextElement>) {\n    for(let i = 0; i < labels.length; i++) {\n        if(query) {\n            let matches = nodeList.map( ({ name, id }) => ({ name, id }));\n            matches = matches.filter((e: any) => e.name.toLowerCase().includes(query.toLowerCase()))\n            let numericalMatches = matches.map( (e: any) => e.id)\n            \n            if(numericalMatches.includes(Number(labels[i].id))) {\n                labels[i].style.opacity = \"1\"\n            } else {\n                labels[i].style.opacity = \"0.2\"\n            }\n        } else {\n            labels[i].style.opacity = \"1\"\n        }\n    }\n}\n\nexport function calcDiagramHeight(nodes: any[], links: any[], panelWidth: number) {\n    let maxNodesCrossed = 0;\n    let maxArc = null;\n\n    for (const link of links) {\n        const nodesCrossed = Math.abs(link.target - link.source) - 1;\n        if (nodesCrossed > maxNodesCrossed) {\n            maxNodesCrossed = nodesCrossed;\n            maxArc = link;\n        }\n    }\n\n    const maxArcDistance = maxArc.target - maxArc.source\n    const step = (panelWidth-50 - 50) / (nodes.length - 1);\n    const maxArcHeight = (maxArcDistance * step) / 2\n\n    const longestName = nodes.reduce((acc, curr) => {\n        if (curr.name.length > acc.name.length) {\n          return curr;\n        } else {\n          return acc;\n        }\n      }).name;\n    \n    // * 3.77 maps string to pixels, * 1.6 maps to highlighted tag\n    const longestNameSize = longestName.length * 3.77 * 1.6\n\n    const graphHeight =  maxArcHeight + longestNameSize\n\n    return graphHeight\n}\n\n","export const styles = {\n    containerStyle: {\n      width: \"100%\",\n      height: \"100%\"\n    } as React.CSSProperties,\n    labelStyle: {\n      width: \"100%\",\n      height: \"100%\",\n      \"z-index\": \"10\",\n    } as React.CSSProperties,\n    buttonStyle: {\n      width: \"30px\",\n      height: \"30px\",\n      top:0,\n      position: \"absolute\"\n    } as React.CSSProperties,\n    toolTipStyle: {\n      box: {\n        position: \"absolute\",\n        left: \"\",\n        top: \"\",\n        width: \"auto\",\n        height: \"auto\",\n        background: \"white\",\n        padding: \"1em\",\n        margin: \"1em\",\n        \"max-width\": \"200px\",\n        \"border-radius\": \"5px\",\n        opacity: 0.9\n      } as React.CSSProperties,\n      text: {\n        color: \"black\",\n        \"font-size\": \"10px\",\n        margin: \"0\",\n        \"font-weight\": \"100\"\n      } as React.CSSProperties,\n      preface: {\n        \"font-weight\": \"900\"\n      } as React.CSSProperties,\n    }, \n    panelContainerStyle: {\n      height: \"100%\",\n      width: \"100%\"\n    } as React.CSSProperties,\n    searchFieldStyle: {\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n      padding: \"1em\"\n    } as React.CSSProperties,\n    inputStyle(isDarkMode: boolean) {\n      return {\n        width: \"200px\",\n        height: \"25px\",\n        background: (isDarkMode) ? \"rgb(244 245 245 / 83%)\" : \"hsla(0, 0%, 0%, 0.5)\",\n        color: (isDarkMode) ? \"black\" : \"white\",\n        \"border-radius\": \"5px\"\n      }\n    }\n}\n","import React, { useEffect, useRef, useState, ReactNode } from 'react';\nimport * as d3 from 'd3';\nimport { idToName, getNodeTargets, linSpace, resetLabel, replaceEllipsis, evaluateQuery } from 'utils';\nimport { styles } from 'styles'\n\nlet toolTip = {\n  source: \"\",\n  target: <p></p> as ReactNode,\n  sum: \"\",\n  field: <p></p> as ReactNode,\n  pos: [0,0]\n}\n\nfunction Arc(props: any) { \n  let uniqueNodes = props.parsedData.uniqueNodes;\n  let links = props.parsedData.links;\n  const containerRef = useRef(null),\n  gRef = useRef(null),\n  labelRef = useRef(null),\n  tooltipRef = useRef(null);\n  const [showTooltip, setShowTooltip] = useState(false)\n\n  const handleToggleTooltip = (isActive: boolean) => {\n    setShowTooltip(isActive);\n  }\n\n  function updateTooltip(pos: number[], isActive: boolean, sourceId: number,  targetId?: number, displayValue?: string): void {\n    \n    // when only sourceId is passed, display node and its targets\n    if(targetId === undefined) {\n      toolTip.source = idToName(sourceId,uniqueNodes)\n      // get targets for passed nodes as strings\n      toolTip.target = getNodeTargets({ id: sourceId, links })\n                       .map((id) => idToName(id, uniqueNodes))\n                       .filter((value, index, array) => array.indexOf(value) === index)\n                       .map((string, index) => (\n                        <p style={styles.toolTipStyle.text} key={index}>\n                          {string}\n                          <br />\n                        </p>\n                       ))     \n      // reset metric and field  \n      toolTip.sum = \"\"\n      toolTip.field = <p></p>\n    } else {\n      toolTip.source = idToName(sourceId,uniqueNodes)\n      toolTip.target =  <p style={styles.toolTipStyle.text}>{idToName(targetId,uniqueNodes)}</p>\n      toolTip.sum = displayValue!\n      toolTip.field = <p><b style={styles.toolTipStyle.preface}>{props.parsedData.additionalField}</b>{links.find((item: { source: any; target: any; }) => item.source === sourceId && item.target === targetId).field\n                      .map((string: any, index: number) => (\n                        <p style={styles.toolTipStyle.text} key={index}>\n                          {string}\n                          <br />\n                        </p>\n                      ))}\n                      </p>\n    }\n   \n    // toggle tooltip\n    handleToggleTooltip(isActive)\n\n    // update position\n    const panelContainer = document.querySelectorAll(`[data-panelid=\"${props.panelId}\"] .panel-container`)[0]\n    if(panelContainer !== undefined) {\n      const mapBounds = panelContainer.getBoundingClientRect();\n      let offsetY = pos[1] - mapBounds.top,\n      offsetX = pos[0] - mapBounds.left\n      \n      const toolTipDom = document.querySelectorAll(\".tooltip\")[0] as HTMLElement,\n      toolTipBounds = toolTipDom.getBoundingClientRect();\n      \n      let leftOrRight = \"left\";\n      if(offsetX + toolTipBounds.right > mapBounds.right) {\n        leftOrRight = \"right\";\n        offsetX = mapBounds.right - pos[0]\n      }\n\n      let topOrBottom = \"top\"\n\n      if((offsetY + toolTipBounds.bottom-350 > mapBounds.bottom)) {\n        topOrBottom = \"bottom\";\n        offsetY = mapBounds.bottom - pos[1]\n      }\n      \n      if (topOrBottom === \"top\") {\n        toolTipDom.style.top = `${offsetY}px`;\n      } else {\n        toolTipDom.style.bottom = `${offsetY}px`;\n      }\n      \n      if (leftOrRight === \"left\") {\n        toolTipDom.style.left = `${offsetX}px`;\n      } else {\n        toolTipDom.style.right = `${offsetX}px`;\n      }\n    }\n    \n\n  };\n\n  useEffect(() => {\n    // removes the graph if it exists in the dom so it gets rendered with updated dimensions\n    d3.selectAll(`[data-panelid=\"${props.panelId}\"] circle, [data-panelid=\"${props.panelId}\"] path, [data-panelid=\"${props.panelId}\"] text`).remove();\n\n    const width = props.width,\n    height = props.height\n\n    \n\n    const container = containerRef.current,\n    graph = gRef.current,\n    labelBox = labelRef.current;\n\n    // render labels\n    const text = d3.select(labelBox)\n      .selectAll(`[data-panelid=\"${props.panelId}\"] text`)\n      .data(uniqueNodes)\n\n    text\n      .enter()\n      .append(\"text\")\n      // if node has large radius, offset the label for readability\n      .attr(\"x\", (d: any) => { return uniqueNodes.find((e: { id: any; }) => e.id === d.id).radius >= 5 ? -(uniqueNodes.find((e: { id: any; }) => e.id === d.id).radius*2) : -10 })\n      .attr(\"y\", (d: any) => { return uniqueNodes.find((e: { id: any; }) => e.id === d.id).radius >= 5 ? (uniqueNodes.find((e: { id: any; }) => e.id === d.id).radius*2) : 10 })\n      .text((d, i) => uniqueNodes[i].name)\n      .style(\"text-anchor\", \"end\")\n      .attr('fill', () => {return props.isDarkMode ? \"white\" : \"black\"})\n      .attr('font-size', 10)\n      .attr('transform', (d, i) => (\"translate(\" + 0 + \",\" + (height) + \")rotate(-45)\"))\n      .style(\"margin-right\", \"5px\")\n      .attr('name', (d, i) => { return uniqueNodes[i].name })\n      .attr('id', (d, i) => { return i })\n\n    // after the labels are rendered, we can find out the amount of margin we need to apply\n    // from the bottom and left so that the diagram is readable. The amount is being calculated from\n    // the boundingbox of the largest highlighted label and the most left label\n    let offsetBottom = Math.max(...Array.from($(\"text\"), (text) => text.getBoundingClientRect().height));\n    // Map to highlighted labels (size increases by 60%)\n    offsetBottom*=1.6\n\n    // get array of equally spaced values for positioning of graph on x axis\n    const values = linSpace(50, width-50, uniqueNodes.length);\n\n    // Update the labels position\n    d3.selectAll(`[data-panelid=\"${props.panelId}\"] text`)\n    .attr('transform', (d, i) => (\"translate(\" + values[i] + \",\" + (height-offsetBottom) + \")rotate(-45)\"))\n\n    // check if label is out of bounds\n    const labelsAsHtml = document.getElementsByTagName(\"text\")\n    Array.from(labelsAsHtml).forEach(element => {\n      replaceEllipsis(element, false)\n    });\n\n    if(props.graphOptions.search) {evaluateQuery(props.query,uniqueNodes, labelsAsHtml)}\n\n    // render nodes\n    const svg = d3.select(container)\n    .selectAll(`[data-panelid=\"${props.panelId}\"] circle`)\n    .data(uniqueNodes)\n\n    svg\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", (d, i) => values[i])\n      .attr(\"cy\", height-offsetBottom)\n      .attr(\"r\", (n: any) => { return  n?.radius })\n      .style(\"fill\", props.parsedData.hexColors.nodeColor)\n      .attr(\"id\", (d, i) => uniqueNodes[i].id)\n      .attr(\"name\", (d, i) => uniqueNodes[i].name)\n      .attr(\"radius\", (d, i) => uniqueNodes[i].radius);\n\n    // render links\n    const g = d3.select(graph)\n      .selectAll(`[data-panelid=\"${props.panelId}\"] path`)\n      .data(links)\n\n    g\n      .enter()\n      .append('path')\n      .attr('d', function (d, i) {\n        const start = values[links[i].source]\n        const end = values[links[i].target]\n        return ['M', start, height-offsetBottom,\n            'A',\n            (start - end) / 2, ',',\n            (start - end) / 2, 0, 0, ',',\n            start < end ? 1 : 0, end, ',', height-offsetBottom\n          ]\n          .join(' ');\n      })\n      .style(\"fill\", \"none\")\n      .attr(\"stroke\", (l: any) => { return  l?.color })\n      .attr(\"id\", \"arc\")\n      .attr(\"stroke-width\", (l: any) => { return  l?.strokeWidth })\n      .style(\"stroke-opacity\", props.graphOptions.arcOpacity)\n      .attr(\"source\", (d, i) => links[i].source)\n      .attr(\"target\", (d, i) => links[i].target)\n      .attr(\"sum\", (d, i) => links[i].sum)\n      .attr(\"displayValue\", (d, i) => links[i].displayValue)\n    \n    /********************************** Highlighting **********************************/ \n    const nodes = d3.selectAll(`[data-panelid=\"${props.panelId}\"] circle`)\n    const paths = d3.selectAll(`[data-panelid=\"${props.panelId}\"] path`)\n    const labels = d3.selectAll(`[data-panelid=\"${props.panelId}\"] text`)\n    const duration = 200;\n    nodes\n      .on(\"mouseover\", function (d) {\n        // Tooltip\n        updateTooltip([d.clientX,d.clientY], true, Number(d.srcElement.id));\n        labelsAsHtml[d.srcElement.id].setAttribute(\"name\", labelsAsHtml[d.srcElement.id].innerHTML)\n        const nodeTargets = getNodeTargets({ id: Number(d.srcElement.id), links })\n        // add ellipsis for node being hovered over & target nodes\n        replaceEllipsis(labelsAsHtml[d.srcElement.id],true)\n        nodeTargets.forEach(e => {\n          replaceEllipsis(labelsAsHtml[e],true)\n        })\n        nodes\n          .style(\"opacity\", ( n: any) => {\n            return nodeTargets.includes(n.id) ? 1 : 0.5\n          })\n          .transition()\n          .attr(\"r\", (n: any) => {\n            return nodeTargets.includes(n.id) ? uniqueNodes[n.id].radius*2 : uniqueNodes[n.id].radius\n          } )\n          .duration(duration)\n        d3.select(this)\n          .style(\"opacity\", 1)\n          .transition()\n          .duration(duration)\n          .attr(\"r\", uniqueNodes[d.srcElement.id].radius*2)\n        paths\n          .transition()\n          .style('stroke-opacity', (l: any) => {\n            /* eslint-disable eqeqeq */\n            return d.srcElement.id == l?.source ? props.graphOptions.arcOpacity : props.graphOptions.arcOpacity*.5\n          })\n          .attr('stroke-width', (l: any) => {\n            /* eslint-disable eqeqeq */\n            return d.srcElement.id == l?.source ? l?.strokeWidth*2 : l?.strokeWidth\n          })\n          .duration(duration)\n        labels\n          .transition()\n          .duration(duration)\n          .attr(\"font-size\", (label_d: any) => {\n            return label_d.name === d.srcElement.getAttribute(\"name\") || nodeTargets.includes(label_d.id) ? 16 : 10\n          })\n          .style(\"opacity\", (label_d: any) => {\n            return label_d.name === d.srcElement.getAttribute(\"name\") || nodeTargets.includes(label_d.id) ? 1 : .1\n          })\n      })\n      .on('mouseout', function (d) {\n        const nodeTargets = getNodeTargets({ id: Number(d.srcElement.id), links })\n        resetLabel(labelsAsHtml[d.srcElement.id])\n        nodeTargets.forEach(e => {\n          resetLabel(labelsAsHtml[e])\n        })\n        handleToggleTooltip(false);\n        nodes\n          .transition()\n          .duration(duration)\n          .attr(\"r\", (n: any) => {\n            return uniqueNodes[n.id].radius\n          } )\n          .style('opacity', 1)\n        d3.select(this)\n          .transition()\n          .duration(duration)\n          .attr(\"r\", uniqueNodes[d.srcElement.id].radius)\n        paths\n          .transition()\n          .duration(duration)\n          .style('stroke-opacity', props.graphOptions.arcOpacity)\n          .attr('stroke-width', (l: any) => {\n            return l?.strokeWidth\n          })\n        labels\n          .transition()\n          .duration(duration)\n          .attr(\"font-size\", 10)\n          .style(\"opacity\", 1)\n      })\n\n      /********************************** Link tooltip **********************************/ \n\n      paths\n      .on(\"mouseover\", function (d) {\n        updateTooltip([d.clientX,d.clientY], true, Number(d.srcElement.getAttribute(\"source\")), Number(d.srcElement.getAttribute(\"target\")), d.srcElement.getAttribute(\"displayValue\"));\n        paths\n          .style(\"opacity\", props.graphOptions.arcOpacity*0.5)\n          .transition()\n          .duration(duration)\n        d3.select(this)\n          .transition()\n          .style('opacity', props.graphOptions.arcOpacity)\n          .duration(duration)\n      })\n      .on('mouseout', function (d) {\n        handleToggleTooltip(false);\n        paths\n          .style(\"opacity\", props.graphOptions.arcOpacity)\n          .transition()\n          .duration(duration)\n        d3.select(this)\n          .transition()\n          .style('opacity', props.graphOptions.arcOpacity)\n          .duration(duration)\n      })\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  }, [props.graphOptions, links, props.height, props.parsedData.hexColors.nodeColor, props.width, uniqueNodes]);\n\n  \n  return ( \n    <div  style={styles.containerStyle} > \n      <svg style={styles.containerStyle} ref = {containerRef}>\n        <g style={styles.containerStyle} ref = {gRef}></g>\n        <svg className=\"text-container\" style={styles.labelStyle} ref = {labelRef}></svg>\n      </svg>\n\n      {showTooltip && (\n        <div ref={tooltipRef} style={styles.toolTipStyle.box} className='tooltip'>\n          <p style={styles.toolTipStyle.text} ><b style={styles.toolTipStyle.preface}>{props.graphOptions.toolTipSource}</b> {\" \"}{toolTip.source}</p>\n          <div style={styles.toolTipStyle.text} ><b style={styles.toolTipStyle.preface}>{props.graphOptions.toolTipTarget}</b>{toolTip.target}</div>\n\n          <p style={styles.toolTipStyle.text} ><b style={styles.toolTipStyle.preface}>{props.graphOptions.toolTipMetric}</b> {toolTip.sum}</p>\n\n          <p style={styles.toolTipStyle.text} > {toolTip.field}</p>\n        </div>\n      )}\n    </div> \n  );\n}\n\n\nexport default Arc;\n\n\n","import React, { ChangeEvent } from 'react'\nimport { styles } from 'styles'\n\nexport default function SearchField(props: any) {\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        props.onQuery(e.target.value)\n    }\n\n    return (\n      <div style={styles.searchFieldStyle}>\n        <input style={styles.inputStyle(props.isDarkMode)} type=\"text\" name=\"name\" onChange={handleChange}/>\n      </div>\n    )\n}\n","import React, { useState } from 'react';\nimport { PanelProps } from '@grafana/data';\nimport { SimpleOptions } from 'types';\nimport { useTheme2 } from '@grafana/ui';\nimport Arc from './components/Arc';\nimport SearchField from './components/SearchField';\nimport { parseData } from 'dataParser';\nimport { styles } from 'styles';\nimport { calcDiagramHeight } from 'utils';\n\ninterface Props extends PanelProps<SimpleOptions> {}\n/**\n * Grafana Arc diagram panel\n *\n * @param {*} { options, data, width, height, id }\n * @return { Arc } Arc diagram\n */\nexport const SimplePanel: React.FC<Props> = ({ options, data, width, height, id }: any) => {\n  const [query, setQuery] = useState(\"\");\n\n  let graphOptions = {\n    ...options,\n  };\n  \n  const theme = useTheme2();\n\n  if (data.series[0].fields.length > 3) {\n    return <div>4th group by not supported</div>;\n  }\n\n  // check if source equals dst \n  const source = options.src ? data.series[0].fields.find((obj: { name: any; }) => obj.name === options.src).name : data.series[0].fields[0].name;\n  const target = options.dest ? data.series[0].fields.find((obj: { name: any; }) => obj.name === options.dest).name : data.series[0].fields[1].name;\n\n  // catch errors\n  if (source === target) {\n    return <div>Source equals target</div>;\n  }\n\n  let parsedData: { uniqueNodes: any[]; links: any[] } = {\n    uniqueNodes: [],\n    links: []\n  };\n\n  try {\n    parsedData = parseData(data, graphOptions, theme);\n  } catch (error) {\n    console.error('parsing error: ', error);\n  }\n\n  console.log((calcDiagramHeight(parsedData.uniqueNodes, parsedData.links, width) > height))\n  // check if diagram fits panel\n  if (calcDiagramHeight(parsedData.uniqueNodes, parsedData.links, width) > height) {\n    return <div>Increase panels height to fit diagram</div>;\n  }\n\n  const textColor = theme.colors.text.primary;\n\n  return (\n    <div style={styles.panelContainerStyle}>\n      <Arc\n        textColor={textColor}\n        parsedData={parsedData}\n        graphOptions={graphOptions}\n        width={width}\n        height={height}\n        query={query}\n        isDarkMode={theme.isDark}\n        panelId={id}\n      ></Arc>\n      {options.search && <SearchField\n        onQuery={setQuery}\n        nodeList={parsedData.uniqueNodes}\n        isDarkMode={theme.isDark}\n      ></SearchField>}\n      \n    </div>\n  );\n};\n\n\n\n","import React, { ReactNode, useCallback } from 'react';\nimport { RangeSlider } from '@grafana/ui';\nimport { StandardEditorProps, StringFieldConfigSettings } from '@grafana/data';\n\n\ninterface Props extends StandardEditorProps<string, StringFieldConfigSettings> {\n  suffix?: ReactNode;\n}\n\nexport const CustomRangeSlider: React.FC<Props> = ({ value, onChange, item, suffix }) => {\n\n  const onValueChange = useCallback(\n    (value: number[] | undefined) => {\n      onChange(String(value))\n    },\n    \n    [onChange]\n  );\n\n  return (\n    <div>\n      <RangeSlider\n          min={1}\n          max={50}\n          onAfterChange={onValueChange}\n          onChange={onValueChange}\n          orientation=\"horizontal\"\n          value={[\n              1,\n              15\n          ]}\n      />\n    </div>\n  )\n};\n\n","import { PanelPlugin, getFieldDisplayName, FieldOverrideContext, FieldConfigProperty } from '@grafana/data';\nimport { SimpleOptions } from './types';\nimport { SimplePanel } from './SimplePanel';\nimport { CustomRangeSlider } from './components/CustomRangeSlider'\n\nconst AppearanceCategory = ['Appearance'];\nconst DataCategory = ['Data'];\n\n\nexport const plugin = new PanelPlugin<SimpleOptions>(SimplePanel).setPanelOptions(builder => {\n  return builder\n    .addBooleanSwitch({\n      path: 'arcFromSource',\n      name: 'Arc thickness from source',\n      defaultValue: false,\n      category: AppearanceCategory,\n    })\n    .addSliderInput({\n      path: 'arcThickness',\n      name: 'Arc thickness',\n      defaultValue: 1,\n      settings: {\n        min: 1,\n        max: 15,\n        step: 1,\n      },\n      showIf: config => !config.arcFromSource,\n      category: AppearanceCategory,\n    })\n    .addSliderInput({\n      path: 'arcOpacity',\n      name: 'Arc opacity',\n      defaultValue: 1,\n      settings: {\n        min: .1,\n        max: 1,\n        step: .1,\n      },\n      category: AppearanceCategory,\n    })\n    .addBooleanSwitch({\n      path: 'radiusFromSource',\n      name: 'Node radius from source',\n      defaultValue: false,\n      category: AppearanceCategory,\n    })\n    .addSliderInput({\n      path: 'nodeRadius',\n      name: 'Node radius',\n      defaultValue: 5,\n      settings: {\n        min: 5,\n        max: 15,\n        step: 1,\n      },\n      showIf: config => !config.radiusFromSource,\n      category: AppearanceCategory,\n    })\n    .addSelect({\n      path: 'linkColorConfig',\n      name: 'Link color',\n      description: 'Select configuration for the link color',\n      defaultValue: \"default\",\n      category: AppearanceCategory,\n      settings: {\n        allowCustomValue: false,\n        options: [\n          { \n            label: \"Default\", \n            value: \"default\"\n          },\n          { \n            label: \"By field\", \n            value: \"field\",\n          }\n        ],\n      },\n    })\n    .addSelect({\n      path: 'colorConfigField',\n      name: 'Field',\n      description: 'Select a field to base the link color on:',\n      category: AppearanceCategory,\n      settings: {\n        allowCustomValue: false,\n        options: [],\n        getOptions: async (context: FieldOverrideContext) => {\n          const options = [];\n          if (context && context.data) {\n            for (const frame of context.data) {\n              for (const field of frame.fields) {\n                const name = getFieldDisplayName(field, frame, context.data);\n                const value = name;\n                options.push({ value, label: name });\n              }\n            }\n          }\n          return Promise.resolve(options);\n        },\n      },\n      showIf: config => config.linkColorConfig !== \"default\",\n    })\n    .addColorPicker({\n      path: 'linkColor',\n      name: 'Link Color',\n      defaultValue: 'blue',\n      showIf: config => config.linkColorConfig === \"default\",\n      category: AppearanceCategory,\n    })\n    .addColorPicker({\n      path: 'nodeColor',\n      name: 'Node Color',\n      defaultValue: 'blue',\n      category: AppearanceCategory,\n    })\n    .addBooleanSwitch({\n      path: 'search',\n      name: 'Activate search bar',\n      defaultValue: false,\n      category: AppearanceCategory,\n    })\n    .addSelect({\n      path: 'scale',\n      name: 'Scaling',\n      defaultValue: \"lin\",\n      description: 'Select the scaling of the diagram',\n      settings: {\n        allowCustomValue: false,\n        options: [\n          {\n            label: 'Linear',\n            value: 'lin',\n          },\n          {\n            label: \"Logarithmic\",\n            value: \"log\"\n          }\n        ],\n      },\n      showIf: config => config.radiusFromSource || config.arcFromSource,\n      category: DataCategory,\n    })\n    .addCustomEditor({\n      id: \"setRange\",\n      path: \"arcRange\",\n      editor: CustomRangeSlider,\n      name: 'Range for weighted links',\n      description: 'Range which the arc thickness is being mapped to',\n      category: DataCategory,\n      defaultValue: \"1,15\",\n      showIf: config => config.scale === \"log\" && config.arcFromSource,\n    })\n    .addCustomEditor({\n      id: \"setRange\",\n      path: \"NodeRange\",\n      editor: CustomRangeSlider,\n      name: 'Range for weighted nodes',\n      description: 'Range which the node radius is being mapped to',\n      category: DataCategory,\n      defaultValue: \"1,15\",\n      showIf: config => config.scale === \"log\" && config.radiusFromSource,\n    })\n    .addSelect({\n      path: 'src',\n      name: 'Source',\n      description: 'Select the field to use as source:',\n      category: DataCategory,\n      settings: {\n        allowCustomValue: false,\n        options: [],\n        getOptions: async (context: FieldOverrideContext) => {\n          const options = [];\n          if (context && context.data) {\n            for (const frame of context.data) {\n              for (const field of frame.fields) {\n                const name = getFieldDisplayName(field, frame, context.data);\n                const value = name;\n                options.push({ value, label: name });\n              }\n            }\n          }\n          return Promise.resolve(options);\n        },\n      },\n    })\n    .addSelect({\n      path: 'dest',\n      name: 'Destination',\n      description: 'Select the field to use as target:',\n      category: DataCategory,\n      defaultValue: \"\",\n      settings: {\n        allowCustomValue: false,\n        options: [],\n        getOptions: async (context: FieldOverrideContext) => {\n          const options = [];\n          if (context && context.data) {\n            for (const frame of context.data) {\n              for (const field of frame.fields) {\n                const name = getFieldDisplayName(field, frame, context.data);\n                const value = name;\n                options.push({ value, label: name });\n              }\n            }\n          }\n          return Promise.resolve(options);\n        },\n      },\n    })\n    .addTextInput({\n      path: \"toolTipSource\",\n      name: 'Tooltip text',\n      category: DataCategory,\n      defaultValue: \"From: \",\n      description: 'Text to be displayed infront of target node.',\n    })\n    .addTextInput({\n      path: \"toolTipTarget\",\n      name: 'Tooltip text',\n      category: DataCategory,\n      defaultValue: \"To: \",\n      description: 'Text to be displayed infront of source node.',\n    })\n    .addTextInput({\n      path: \"toolTipMetric\",\n      name: 'Tooltip text',\n      category: DataCategory,\n      defaultValue: \"Sum: \",\n      description: 'Text to be displayed infront of metric.',\n    })\n})\n.useFieldConfig({\n  disableStandardOptions: [FieldConfigProperty.NoValue, FieldConfigProperty.Max, FieldConfigProperty.Min],\n  standardOptions: {\n    [FieldConfigProperty.Color]: {\n      settings: {\n        byValueSupport: true,\n        bySeriesSupport: true,\n        preferThresholdsMode: true,\n      },\n    },\n  },\n});\n\n\n","import { calcStrokeWidth, mapToLogRange, getEvenlySpacedColors } from 'utils';\n\n/**\n * Takes data from Grafana query and returns it in the format needed for this panel\n *\n * @param data the data returned by the query\n * @param options the field options from the editor panel\n * @param theme needed for utility functions for example to map color strings to hex values\n * @return {uniqueNodes} list of unique nodes to be rendered on the x axis\n * @return {links} array of objects with fields source, target, sum, strokewidth where each object represents one link\n * @return {hexColors} colors converted to hex\n */\n\nexport function parseData(data: { series: any[] }, options: any, theme: any) { // <- should that have proper typing?\n\n  const allData = data.series[0].fields;\n\n  /********************************** Nodes/links **********************************/ \n\n  // if src/dst not defined in options, take first/second group by default\n  const sourceString = options.src ? allData.find((obj: { name: any; }) => obj.name === options.src).name : allData[0].name;\n  const targetString = options.dest ? allData.find((obj: { name: any; }) => obj.name === options.dest).name : allData[1].name;\n  const sourceValues = allData.find((obj: { name: any; }) => obj.name === sourceString)?.values\n  const targetValues = allData.find((obj: { name: any; }) => obj.name === targetString)?.values\n\n  // get the field that's neither used as source or dest\n  let additionalField = \"\"\n  if(allData.length > 3) {\n    const usedFields = [sourceString, targetString, allData[allData.length -1].name]\n    const compareArray = allData.map( (obj: any) => obj.name)\n    additionalField = compareArray.filter( (obj: any ) => !usedFields.includes(obj))[0]\n  }\n  \n  // get source and target arrays and create array of unique nodes from them\n  const uniqueNodes = Array.from([...new Set([...sourceValues, ...targetValues])]).map((str, index) => ({\n    id: index,\n    name: str,\n    sum: 0,\n    radius: 0\n  }));\n\n  let srcById = sourceValues.map((name: any) => {\n    const dictionaryItem = uniqueNodes.find(item => item.name === name);\n    return dictionaryItem ? dictionaryItem.id : null;\n  });\n\n  let dstById = targetValues.map((name: any) => {\n    const dictionaryItem = uniqueNodes.find(item => item.name === name);\n    return dictionaryItem ? dictionaryItem.id : null;\n  });\n\n  let links = srcById.map((element: any, index: string | number) => ({\n    source: element,\n    target: dstById[index],\n    sum: allData.find((obj: { name: any; }) => obj.name === allData[allData.length -1].name)?.values.buffer[index] as number,\n    strokeWidth: 0,\n    color: \"\",\n    field: (additionalField === \"\") ? [additionalField] : allData.find(( obj: any) => obj.name === additionalField).values.buffer[index],\n    // for coloring the links by source, add a field with the name of the selected field\n    [options.colorConfigField]: allData.find((obj: { name: any; }) => obj.name === options.colorConfigField)?.values.buffer[index],\n    displayValue: `${allData[allData.length -1].display(allData[allData.length -1].values.buffer[index]).text}${(allData[allData.length -1].display(allData[allData.length -1].values.buffer[index]).suffix !== undefined) ? allData[allData.length -1].display(allData[allData.length -1].values.buffer[index]).suffix : \"\"}`\n  }));\n\n\n  // Initialize object to store aggregated sums\n  const nodeSums: {[key: number]: number} = {};\n\n  // Loop through links array and populate nodeSums object\n  links.forEach((link: { source: any; sum: any; }) => {\n    const {source, sum} = link;\n    if (nodeSums[source]) {\n      nodeSums[source] += sum;\n    } else {\n      nodeSums[source] = sum;\n    }\n  });\n\n  // Create array of unique nodes with aggregated sums\n  const nodes  = Object.keys(nodeSums).map(nodeId => ({\n    id: nodeId as unknown as number,\n    sum: nodeSums[nodeId as unknown as number],\n  }));\n\n  links.forEach(function(link: { target: any; }) {\n    const target = link.target;\n    if (!nodeSums[target]) {\n      nodes.push({id: target, sum: 1});\n      nodeSums[target] = 1;\n    }\n  });\n\n  uniqueNodes.map(function(element, index) {\n    element.sum = nodes[index].sum\n  });\n\n  /********************************** Scaling/coloring **********************************/ \n\n   // color\n    const hexColors = {\n      nodeColor: theme.visualization.getColorByName(options.nodeColor),\n      linkColor: theme.visualization.getColorByName(options.linkColor)\n    }\n\n    // set range for log mapping\n    const linkScaleFrom = options.arcRange?.split(\",\").map(Number)[0]\n    const linkScaleTo = options.arcRange?.split(\",\").map(Number)[1]\n    const nodeScaleFrom = options.NodeRange?.split(\",\").map(Number)[0]\n    const nodeScaleTo = options.NodeRange?.split(\",\").map(Number)[1]\n\n    const minLink = Number(Math.min(...links.map(( e: any ) => e.sum))),\n    maxLink = Number(Math.max(...links.map(( e: any ) => e.sum))),\n    minNode = Number(Math.min(...uniqueNodes.map(( e: any ) => e.sum))),\n    maxNode = Number(Math.max(...uniqueNodes.map(( e: any ) => e.sum)))\n\n    // create groups for the field specified\n    let groups: any[] = []\n    if(options.linkColorConfig !== \"default\" && options.colorConfigField) {\n      // create unique groups according to the setting specified in options\n      groups = [...new Set(links.map( ( item: any ) => item[options.colorConfigField]))].map( ( group: any ) => ({\n        [options.colorConfigField]: group,\n        color: \"\"\n      }))\n\n      const spacedColors = getEvenlySpacedColors(groups.length, theme.isDark)\n\n      groups.forEach( (e, i) => {\n        e.color = spacedColors[i]\n      })\n    }\n    \n    links.forEach((e: {source: number, strokeWidth: number; sum: number; color: string; field: string;}) => {\n      calcStrokeWidth(options.arcFromSource, options.scale, options.arcThickness, e, linkScaleFrom, linkScaleTo, minLink, maxLink)\n      // link color by field\n      if (options.linkColorConfig === \"field\" && groups) {\n        e.color = groups.find( group => group[options.colorConfigField] === e[options.colorConfigField as keyof typeof e])!.color\n      } else {\n        e.color = hexColors.linkColor\n      }\n    });\n\n    uniqueNodes.forEach((e: { id: any, radius: any; sum: any; }) => {\n      // check if arc thickness is set to source\n      if(options.radiusFromSource) {\n        // check if we apply logarithmic or linear scaling\n        if(options.scale === \"log\") {\n          // check if node only receiving. if yes, give it the size of the largest incoming link\n          if(![...new Set(links.map((node: { source: any; }) => node.source))].includes(e.id)) {\n            e.radius = Math.max(...links.filter( (link: { target: any; }) => link.target === e.id).map((el: { strokeWidth: number}) => el.strokeWidth))/2\n          } else {\n            e.radius = mapToLogRange( e.sum, nodeScaleFrom, nodeScaleTo, minNode, maxNode)\n          }\n          \n        } else {\n          if(![...new Set(links.map((node: { source: any; }) => node.source))].includes(e.id)) {\n            e.radius = Math.max(...links.filter( (link: { target: any; }) => link.target === e.id).map((el: { strokeWidth: number}) => el.strokeWidth))/2\n          } else {\n            // scaling factor change via options to be implemented\n            e.radius = (e.sum/100000000000000)\n          }\n          \n        }\n        \n      } else {\n        e.radius = options.nodeRadius\n      }\n    });\n\n    const uniqueLinks = links.reduce((acc: any, cur: any) => {\n      const existing = acc.find((e: any) => e.source === cur.source && e.target === cur.target);\n      if (existing) {\n        existing.sum += cur.sum;\n        if (!existing.field.includes(cur.field)) {\n          existing.field.push(cur.field);\n        }\n      } else {\n        acc.push({\n          source: cur.source,\n          target: cur.target,\n          sum: cur.sum,\n          displayValue: cur.displayValue,\n          strokeWidth: 0,\n          color: cur.color,\n          field: [cur.field],\n          [options.colorConfigField]: cur[options.colorConfigField]\n        });\n      }\n      return acc;\n    }, []);\n\n    uniqueLinks.forEach((e: {source: number, strokeWidth: number; sum: number; color: string; field: string;}) => {\n      calcStrokeWidth(options.arcFromSource, options.scale, options.arcThickness, e, linkScaleFrom, linkScaleTo, minLink, maxLink)\n    })\n  \n    if(allData.length > 3) {\n      links = uniqueLinks;\n    }\n    \n\n  return {uniqueNodes, links, hexColors, additionalField};\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__200__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","idToName","id","dic","find","name","getNodeTargets","links","filter","source","map","target","mapToLogRange","rangeMin","rangeMax","minLinkSum","maxLinkSum","logMinValue","Math","log10","factor","calcStrokeWidth","arcFromSource","scale","arcThickness","e","linkScaleFrom","linkScaleTo","minLink","maxLink","strokeWidth","sum","replaceEllipsis","label","isHighlighted","labelBoundingBox","getBoundingClientRect","width","mapRatio","labelOffsetX","Number","getAttribute","split","substring","overlap","innerHTML","length","resetLabel","calcDiagramHeight","nodes","panelWidth","maxNodesCrossed","maxArc","link","nodesCrossed","abs","reduce","acc","curr","styles","containerStyle","height","labelStyle","buttonStyle","top","position","toolTipStyle","box","left","background","padding","margin","opacity","text","color","preface","panelContainerStyle","searchFieldStyle","right","inputStyle","isDarkMode","toolTip","p","field","pos","props","uniqueNodes","parsedData","containerRef","useRef","gRef","labelRef","tooltipRef","showTooltip","setShowTooltip","useState","handleToggleTooltip","isActive","updateTooltip","sourceId","targetId","displayValue","index","array","indexOf","string","style","br","b","additionalField","item","panelContainer","document","querySelectorAll","panelId","mapBounds","offsetY","offsetX","toolTipDom","toolTipBounds","leftOrRight","topOrBottom","bottom","useEffect","d3","remove","container","current","graph","labelBox","selectAll","data","enter","append","attr","radius","i","offsetBottom","max","Array","from","$","values","start","stop","step","_","linSpace","labelsAsHtml","getElementsByTagName","forEach","element","graphOptions","search","query","nodeList","labels","matches","toLowerCase","includes","evaluateQuery","hexColors","nodeColor","end","join","l","arcOpacity","paths","duration","on","clientX","clientY","srcElement","setAttribute","nodeTargets","transition","this","label_d","div","svg","ref","g","className","toolTipSource","toolTipTarget","toolTipMetric","SearchField","input","type","onChange","onQuery","CustomRangeSlider","suffix","onValueChange","useCallback","String","RangeSlider","min","onAfterChange","orientation","AppearanceCategory","DataCategory","plugin","PanelPlugin","options","setQuery","theme","useTheme2","series","fields","src","dest","allData","sourceString","targetString","sourceValues","targetValues","usedFields","compareArray","Set","str","srcById","dictionaryItem","dstById","buffer","colorConfigField","display","nodeSums","keys","nodeId","push","visualization","getColorByName","linkColor","arcRange","nodeScaleFrom","NodeRange","nodeScaleTo","minNode","maxNode","groups","linkColorConfig","group","spacedColors","amount","darkMode","colors","lightColors","darkColors","colorIndex","getEvenlySpacedColors","isDark","radiusFromSource","node","el","nodeRadius","uniqueLinks","cur","existing","parseData","error","console","log","textColor","primary","Arc","setPanelOptions","builder","addBooleanSwitch","path","defaultValue","category","addSliderInput","settings","showIf","config","addSelect","description","allowCustomValue","getOptions","context","frame","getFieldDisplayName","Promise","resolve","addColorPicker","addCustomEditor","editor","addTextInput","useFieldConfig","disableStandardOptions","FieldConfigProperty","standardOptions","byValueSupport","bySeriesSupport","preferThresholdsMode"],"sourceRoot":""}